     1                                  bits 32 
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  
     7                                  import exit msvcrt.dll
     8                                   
     9                                  segment data use32 class = data
    10                                      
    11 00000000 0A                          a db 10
    12 00000001 1400                        b dw 20
    13 00000003 05000000                    c dd 5
    14 00000007 0400000000000000            d dq 4
    15                                      
    16                                  segment code use32 class = code
    17                                  start: ;(b + c + a) - (d + c + a) - unsigned
    18                                  
    19                                      ;b -> EBX
    20 00000000 668B1D[01000000]            mov BX, [b]     ;BX = b
    21 00000007 666A00                      push WORD 0
    22 0000000A 6653                        push BX
    23 0000000C 5B                          pop EBX         ;BX -> EBX = b
    24                                      
    25                                      ;a -> EAX
    26 0000000D A0[00000000]                mov AL, [a]     ;AL = a
    27 00000012 B400                        mov AH, 0       ;AL -> AX = a
    28 00000014 666A00                      push WORD 0
    29 00000017 6650                        push AX
    30 00000019 58                          pop EAX         ;AX -> EAX = a
    31 0000001A 89C2                        mov EDX, EAX    ;EDX = a
    32                                      
    33                                      ;adding a + b + c 
    34 0000001C 01D8                        add EAX, EBX    ;EAX = a + b
    35 0000001E 0305[03000000]              add EAX, [c]    ;EAX = b + c + a
    36 00000024 50                          push EAX        ;[ESP]1 = b + c + a
    37                                      
    38 00000025 0315[03000000]              add EDX, [c]    ;EDX = a + c
    39 0000002B 89D0                        mov EAX, EDX    ;EAX = a + c
    40 0000002D BA00000000                  mov EDX, 0      ;EAX -> EDX:EAX = a + c
    41                                      
    42                                      ;d -> ECX:EBX
    43 00000032 8B1D[07000000]              mov EBX, [d]
    44 00000038 8B0D[0B000000]              mov ECX, [d + 4];ECX:EBX = d
    45                                      
    46                                      ;adding d + c + a (qword)
    47 0000003E 01D8                        add EAX, EBX
    48 00000040 11CA                        adc EDX, ECX    ;EDX:EAX = (d + c + a)
    49                                      
    50                                      ;(b + c + a) -> ECX:EBX
    51 00000042 5B                          pop EBX         ;EBX = (b + c + a)
    52 00000043 B900000000                  mov ECX, 0      ;EBX -> ECX:EBX = (b + c + a)
    53                                      
    54                                      ;final subtraction
    55 00000048 29C3                        sub EBX, EAX
    56 0000004A 19D1                        sbb ECX, EDX    ;ECX:EBX = (b + c + a) - (d + c + a)
    57                                      
    58 0000004C 6A00                        push dword 0
    59 0000004E FF15[00000000]              call [exit]
    60                                  
    61                                  
