     1                                  bits 32 
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  
     7                                  import exit msvcrt.dll
     8                                   
     9                                  segment data use32 class = data
    10                                      
    11 00000000 2211                        a dw 1122h
    12 00000002 05                          b db 05h
    13 00000003 32                          c db 32h
    14 00000004 66554433                    e dd 33445566h
    15 00000008 1122334455667788            x dq 8877665544332211h
    16                                      
    17                                  segment code use32 class = code
    18                                  start:;a * b - (100 - c) / (b * b) + e + x - unsigned
    19                                      
    20 00000000 A0[02000000]                mov AL, [b]     ;AL = b
    21 00000005 B400                        mov AH, 0       ;AL -> AX = b (unsigned)
    22 00000007 66F725[00000000]            mul WORD [a]    ;DX:AX = a * b
    23                                      
    24 0000000E 6652                        push DX
    25 00000010 6650                        push AX         ;[ESP]1 = DX:AX = a * b
    26                                     
    27                                      ;(100 - c) -> DX:AX
    28 00000012 B064                        mov AL, 100
    29 00000014 2A05[03000000]              sub AL, [c]     ;AL = (100 - c)
    30 0000001A B400                        mov AH, 0       ;AL -> AX = (100 - c)
    31 0000001C 66BA0000                    mov DX, 0       ;AX -> DX:AX = (100 - c)
    32                                      
    33 00000020 6652                        push DX
    34 00000022 6650                        push AX         ;[ESP]2 = DX:AX = (100 - c)
    35                                      
    36 00000024 A0[02000000]                mov AL, [b]
    37 00000029 F625[02000000]              mul BYTE [b]    ;AX = b * b
    38 0000002F 6689C3                      mov BX, AX      ;BX = (b * b)
    39                                      
    40 00000032 6658                        pop AX          
    41 00000034 665A                        pop DX          ;pop [ESP]2 -> DX:AX = (100 - c)
    42                                      
    43 00000036 66F7F3                      div BX          ;AX = (100 - c) / (b * b)
    44                                      
    45                                      ;AX -> EBX
    46 00000039 666A00                      push WORD 0
    47 0000003C 6650                        push AX
    48 0000003E 5B                          pop EBX         ;EBX = (100 - c) / (b * b)
    49                                      
    50 0000003F 58                          pop EAX         ;pop [ESP]1 -> EAX = a * b
    51                                      
    52 00000040 8B0D[04000000]              mov ECX, [e]    ;ECX = e
    53                                      
    54 00000046 29D8                        sub EAX, EBX    ;EAX = (a * b) - [(100 - c) / (b * b)]
    55 00000048 01C8                        add EAX, ECX    ;EAX = [a * b - (100 - c) / (b * b)] + e
    56 0000004A BA00000000                  mov EDX, 0      ;EAX -> EDX:EAX
    57                                      
    58                                      ;x -> ECX:EBX
    59 0000004F 8B1D[08000000]              mov EBX, [x]
    60 00000055 8B0D[0C000000]              mov ECX, [x + 4];ECX:EBX = x
    61                                      
    62                                      ;last addition
    63 0000005B 01D8                        add EAX, EBX
    64 0000005D 11CA                        adc EDX, ECX    ;EDX:EAX = a * b - (100 - c) / (b * b) + e + x
    65                                      
    66 0000005F 6A00                        push dword 0
    67 00000061 FF15[00000000]              call [exit]
    68                                  
    69                                  
