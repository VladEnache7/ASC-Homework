     1                                  bits 32 
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  
     7                                  import exit msvcrt.dll
     8                                   
     9                                  segment data use32 class = data
    10                                      
    11 00000000 11                          a db 11h
    12 00000001 22                          b db 22h
    13 00000002 33                          c db 33h
    14 00000003 44332211                    e dd 11223344h
    15 00000007 8877665544332211            x dq 1122334455667788h
    16                                      
    17                                      
    18                                  segment code use32 class = code
    19                                  start:;x - (a * b * 25 + c * 3) / (a + b) + e - signed
    20                                      
    21                                      ;(a * b * 25)
    22 00000000 A0[00000000]                mov AL, [a]     ;AL = a
    23 00000005 F625[01000000]              mul BYTE [b]    ;AX = a * b
    24 0000000B 6699                        cwd             ;AX -> DX:AX
    25 0000000D 66BB1900                    mov BX, 25      ;BX = 25
    26 00000011 66F7EB                      imul BX         ;DX:AX = a * b * 25
    27                                      
    28 00000014 6652                        push DX
    29 00000016 6650                        push AX         ;[ESP]1 = DX:AX = a * b * 25
    30 00000018 5B                          pop EBX         ;EBX = a * b * 25
    31                                      
    32                                      ;(c * 3)
    33 00000019 A0[02000000]                mov AL, [c]     ;AL = c
    34 0000001E B103                        mov CL, 3       ;BL = 3
    35 00000020 F6E9                        imul CL         ;AX = c * 3
    36 00000022 98                          cwde            ;AX -> EAX = c * 3
    37                                      
    38 00000023 01D8                        add EAX, EBX    ;EAX = (a * b * 25 + c * 3)
    39                                      
    40 00000025 50                          push EAX        ;[ESP]1 = EAX = (a * b * 25 + c * 3)
    41                                      
    42                                      
    43 00000026 A0[00000000]                mov AL, [a]     ;AL = a
    44 0000002B 8A1D[01000000]              mov BL, [b]     ;BL = b
    45 00000031 00D8                        add AL, BL      ;AL = (a + b)
    46 00000033 6698                        cbw             ;AL -> AX = (a + b)
    47 00000035 6689C3                      mov BX, AX      ;BX = (a + b)
    48                                      
    49 00000038 6658                        pop AX
    50 0000003A 665A                        pop DX          ;DX:AX = (a * b * 25 + c * 3)
    51                                      
    52 0000003C 66F7FB                      idiv BX         ;AX = (a * b * 25 + c * 3) / (a + b)
    53 0000003F 98                          cwde            ;AX -> EAX
    54                                      
    55                                      ;dword -> (a * b * 25 + c * 3) / (a + b) + e
    56 00000040 8B0D[03000000]              mov ECX, [e]
    57 00000046 01C8                        add EAX, ECX    ;EAX = (a * b * 25 + c * 3) / (a + b) + e
    58 00000048 99                          cdq             ;EAX -> EDX:EAX
    59                                      
    60 00000049 8B1D[07000000]              mov EBX, [x]
    61 0000004F 8B0D[0B000000]              mov ECX, [x + 4];ECX:EBX = x
    62                                      
    63                                      ;x - ((a * b * 25 + c * 3) / (a + b) + e)
    64 00000055 29C3                        sub EBX, EAX
    65 00000057 19D1                        sbb ECX, EDX    ;ECX:EBX = x - (a * b * 25 + c * 3) / (a + b) + e
    66                                      
    67 00000059 6A00                        push dword 0
    68 0000005B FF15[00000000]              call [exit]
    69                                  
    70                                  
