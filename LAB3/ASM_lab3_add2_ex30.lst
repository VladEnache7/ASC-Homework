     1                                  bits 32 
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  
     7                                  import exit msvcrt.dll
     8                                   
     9                                  segment data use32 class = data
    10                                      
    11 00000000 11                          a db 11h
    12 00000001 3322                        b dw 2233h
    13 00000003 77665544                    c dd 44556677h
    14 00000007 8877665544332211            d dq 1122334455667788h
    15                                      
    16                                  segment code use32 class = code
    17                                  start: ; d - a + c + c - b + a - signed
    18                                      
    19                                      ;d -> ECX:EBX
    20 00000000 8B1D[07000000]              mov EBX, [d]
    21 00000006 8B0D[0B000000]              mov ECX, [d + 4]    ;ECX:EBX = d
    22                                      
    23                                      ;a -> EDX:EAX
    24 0000000C A0[00000000]                mov AL, [a]         ;AL = a
    25 00000011 6698                        cbw                 ;AL -> AX = a
    26 00000013 98                          cwde                ;AX -> EAX = a
    27 00000014 99                          cdq                 ;EAX -> EDX:EAX
    28                                      
    29                                      ;qword -> d - a 
    30 00000015 29C3                        sub EBX, EAX
    31 00000017 19D1                        sbb ECX, EDX        ;ECX:EBX = d - a
    32                                      
    33 00000019 52                          push EDX            ;[ESP]1 = EDX 
    34 0000001A 50                          push EAX            ;[ESP]2 = EAX 
    35                                      
    36                                      ;c -> EDX:EAX
    37 0000001B A1[03000000]                mov EAX, [c]        ;EAX = c
    38 00000020 99                          cdq                 ;EAX -> EDX:EAX = c
    39                                      
    40                                      ;qword -> (d - a) + c
    41 00000021 01C3                        add EBX, EAX        
    42 00000023 11D1                        adc ECX, EDX        ;ECX:EBX = d - a + c
    43                                      
    44                                      ;qword -> (d - a + c) + c
    45 00000025 01C3                        add EBX, EAX        
    46 00000027 11D1                        adc ECX, EDX        ;ECX:EBX = d - a + c + c
    47                                      
    48                                      ;b -> EDX:EAX
    49 00000029 66A1[01000000]              mov AX, [b]         ;AX = b
    50 0000002F 98                          cwde                ;AX -> EAX = b
    51 00000030 99                          cdq                 ;EAX -> EDX:EAX = b
    52                                      
    53                                      ;qword -> (d - a + c + c) - b
    54 00000031 29C3                        sub EBX, EAX
    55 00000033 19D1                        sbb ECX, EDX        ;ECX:EBX = d - a + c + c - b
    56                                      
    57 00000035 58                          pop EAX
    58 00000036 5A                          pop EDX             ;EDX:EAX = a
    59                                      
    60                                      ;qword -> (d - a + c + c - b) + a
    61 00000037 01C3                        add EBX, EAX
    62 00000039 11D1                        adc ECX, EDX        ;ECX:EBX = d - a + c + c - b + a
    63                                      
    64 0000003B 6A00                        push dword 0
    65 0000003D FF15[00000000]              call [exit]
    66                                  
    67                                  
