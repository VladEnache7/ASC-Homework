     1                                  bits 32 v
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  
     7                                  import exit msvcrt.dll
     8                                   
     9                                  segment data use32 class = data
    10                                      
    11 00000000 10                          a db 10h
    12 00000001 0020                        b dw 2000h
    13 00000003 00100000                    c dd 1000h
    14 00000007 0000000000005000            d dq 50000000000000h
    15                                           
    16                                      
    17                                  segment code use32 class = code
    18                                  start: ;a + b - c + (d - a)
    19 00000000 A0[00000000]                mov AL, [a]     ;AL = a
    20 00000005 B400                        mov AH, 0       ;unsigned conversion AL -> AX
    21 00000007 660305[01000000]            add AX, [b]     ;AX = a + b
    22 0000000E 66BA0000                    mov DX, 0       ;unsigned conversion AX -> DX:AX = a + b
    23 00000012 6652                        push DX
    24 00000014 6650                        push AX         ;stack = DX:AX = a + b
    25 00000016 58                          pop EAX         ;EAX = a + b
    26 00000017 2B05[03000000]              sub EAX, [c]    ;EAX = a + b - c
    27 0000001D 50                          push EAX        ;[ESP]1 = a + b - c
    28                                      
    29 0000001E A0[00000000]                mov AL, [a]     ;AL = a
    30 00000023 B400                        mov AH, 0       ;AL -> AX = a
    31 00000025 666A00                      push WORD 0     
    32 00000028 6650                        push AX
    33 0000002A 58                          pop EAX         ;AX -> EAX = a
    34 0000002B BA00000000                  mov EDX, 0      ;EAX -> EDX:EAX
    35                                      
    36 00000030 8B1D[07000000]              mov EBX, [d]
    37 00000036 8B0D[0B000000]              mov ECX, [d + 4];ECX:EBX = d
    38                                      
    39 0000003C 29C3                        sub EBX, EAX 
    40 0000003E 19D1                        sbb ECX, EDX    ;ECX:EBX = d - a
    41                                      
    42 00000040 58                          pop EAX         ;EAX = a + b - c
    43 00000041 BA00000000                  mov EDX, 0      ;EAX -> EDX:EAX = a + b - c
    44                                      
    45 00000046 01D8                        add EAX, EBX
    46 00000048 11CA                        adc EDX, ECX    ;EDX:EAX = a + b - c + (d - a)
    47                                      
    48 0000004A 6A00                        push dword 0
    49 0000004C FF15[00000000]              call [exit]
    50                                  
    51                                  
